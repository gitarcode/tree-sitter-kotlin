==================
Annotations
==================

@Test
class Empty

---

(source_file
  (class_declaration
    modifiers: (modifiers (annotation (user_type (type_identifier))))
    name: (simple_identifier)))

==================
Annotations with use-site-target
==================

class Empty(@field:Test val x: Boolean)

---

(source_file
  (class_declaration
    name: (simple_identifier)
    (primary_constructor (class_parameters (class_parameter
        modifiers: (modifiers (annotation (use_site_target) (user_type (type_identifier))))
        binding_pattern: (binding_pattern_kind)
        name: (simple_identifier)
        type: (user_type (type_identifier)))))))

==================
Multi-annotations
==================

@set:[Inject VisibleForTesting]
var x: Int

---

(source_file
    (property_declaration
        modifiers: (modifiers (annotation (use_site_target) (user_type (type_identifier)) (user_type (type_identifier))))
        (binding_pattern_kind)
        var_decl: (variable_declaration 
                    id: (simple_identifier) 
                    type: (user_type (type_identifier)))))

==================
Multiple annotations on a variable
==================

class X {
 @A @B
 override val s: String
}

---

(source_file
  (class_declaration
    name: (simple_identifier)
    body: (class_body
      (property_declaration
        modifiers: (modifiers
          (annotation (user_type (type_identifier)))
          (annotation (user_type (type_identifier)))
          (member_modifier))
        (binding_pattern_kind)
        var_decl: (variable_declaration 
          id: (simple_identifier) 
          type: (user_type (type_identifier)))
      )
    )
  )
)


==================
Multiple annotations on a function
==================

class X {
 @A @B
 fun s(): String
}

---

(source_file
  (class_declaration
    name: (simple_identifier)
    body: (class_body
      (function_declaration
        modifiers: (modifiers
          (annotation (user_type (type_identifier)))
          (annotation (user_type (type_identifier))))
        name: (simple_identifier)
        parameters: (function_value_parameters)
        type: (user_type (type_identifier))
      )
    )
  )
)

=====================
Annotated functions
======================

@Test
fun foo() = bar {}

---

(source_file
  (function_declaration
    modifiers: (modifiers
      (annotation
        (user_type
          (type_identifier))))
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      (postfix_unary_expression
        expression: (simple_identifier)
        call_suffix: (call_suffix
          lambda_arg: (annotated_lambda
            (lambda_literal)))))))


