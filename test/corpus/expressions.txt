================================================================================
Multiplication expression
================================================================================

45 * 3

--------------------------------------------------------------------------------

(source_file
  (multiplicative_expression
    (integer_literal)
    (integer_literal)))

================================================================================
Safe Navigation
================================================================================

a?.bar()
a? .bar()
a? . bar()
a?
  .bar()
a ? . bar()

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    args: (value_arguments))
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    args: (value_arguments))
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    args: (value_arguments))
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    args: (value_arguments))
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    args: (value_arguments)))

================================================================================
Function calls
================================================================================

print("Hello World!")
sum(1, 2)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (simple_identifier)
    args: (value_arguments
      (value_argument
        (string_literal
          (string_content)))))
  (call_expression
    expression: (simple_identifier)
    args: (value_arguments
      (value_argument
        (integer_literal))
      (value_argument
        (integer_literal)))))

================================================================================
When expression
================================================================================

val x = 1
val y = when(x) {
        1 -> true
        2 -> false
    }

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (integer_literal))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (when_expression
      (when_subject
        (simple_identifier))
      (when_entry
        (when_condition
          (integer_literal))
        (control_structure_body
          (boolean_literal)))
      (when_entry
        (when_condition
          (integer_literal))
        (control_structure_body
          (boolean_literal))))))

================================================================================
When expression with type arguments
================================================================================

when (this) {
    is DispatchedCoroutine<*> -> return null
}

--------------------------------------------------------------------------------

(source_file
  (when_expression
    (when_subject
      (this_expression))
    (when_entry
      (when_condition
        (type_test
          (user_type
            (type_identifier)
            (type_arguments
              (type_projection)))))
      (control_structure_body
        (jump_expression
          (null_literal))))))

================================================================================
Value declaration with receiver type
================================================================================

val MyDate.s: String get() = "hello"

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    (binding_pattern_kind)
    (user_type
      (type_identifier))
    var_decl: (variable_declaration
      id: (simple_identifier)
      type: (user_type
        (type_identifier)))
    (getter
      (function_body
        (string_literal (string_content))))))

================================================================================
Expect as an expression
================================================================================

val x = expect(1)

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      args: (value_arguments
        (value_argument
          (integer_literal))))))

================================================================================
Expect as a top-level expression
================================================================================

expect(1)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (simple_identifier)
    args: (value_arguments
      (value_argument
        (integer_literal)))))

================================================================================
Expect as a platform modifier
================================================================================

expect fun randomUUID(): String

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    modifiers: (modifiers
      (platform_modifier))
    name: (simple_identifier)
    parameters: (function_value_parameters)
    type: (user_type
      (type_identifier))))

================================================================================
Less than for generics
================================================================================

foo<Int>(1,2)
foo<Int>(1)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (simple_identifier)
    (type_arguments
      (type_projection
        (user_type
          (type_identifier))))
    args: (value_arguments
      (value_argument
        (integer_literal))
      (value_argument
        (integer_literal))))
  (call_expression
    expression: (simple_identifier)
    (type_arguments
      (type_projection
        (user_type
          (type_identifier))))
    args: (value_arguments
      (value_argument
        (integer_literal)))))

================================================================================
Less than for comparison
================================================================================

val x = a<b
val y = a>b
val z = a<b>c
// this is parsed as a generic, but could also be parsed as a comparison
val w = a<b>(c)
val a = a<2>(3)

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (comparison_expression
      (simple_identifier)
      (simple_identifier)))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (comparison_expression
      (simple_identifier)
      (simple_identifier)))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (comparison_expression
      (comparison_expression
        (simple_identifier)
        (simple_identifier))
      (simple_identifier)))
  (line_comment)
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      (type_arguments
        (type_projection
          (user_type
            (type_identifier))))
      args: (value_arguments
        (value_argument
          (simple_identifier)))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (comparison_expression
      (comparison_expression
        (simple_identifier)
        (integer_literal))
      (parenthesized_expression
        (integer_literal)))))

================================================================================
Lambda Expressions
================================================================================

foo.forEach { (index, value) -> 2 }

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (simple_identifier))
    lambda_arg: (annotated_lambda
      (lambda_literal
        parameters: (lambda_parameters
          (multi_variable_declaration
            (variable_declaration
              id: (simple_identifier))
            (variable_declaration
              id: (simple_identifier))))
        body: (statements
          (integer_literal))))))

================================================================================
Function call with trailing lambda
================================================================================

with(s) { length }

--------------------------------------------------------------------------------

(source_file
  (call_expression
    expression: (simple_identifier)
    args: (value_arguments
      (value_argument
        (simple_identifier)))
    lambda_arg: (annotated_lambda
      (lambda_literal
        body: (statements
          (simple_identifier))))))

================================================================================
Multiple Statements on a Single Line
================================================================================

fun main() { val temp = b.y; b.y = b.z; b.z = temp }

when (dir) {
  1 -> { val temp = b.y; b.y = b.z; b.z = temp }
}
--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      (block
        (statements
          (property_declaration
            (binding_pattern_kind)
            var_decl: (variable_declaration
              id: (simple_identifier))
            initializer: (dot_qualified_expression
              receiver: (simple_identifier)
              selector: (simple_identifier)))
          (assignment
            left: (directly_assignable_expression
              (dot_qualified_expression
                receiver: (simple_identifier)
                selector: (simple_identifier)))
            right: (dot_qualified_expression
              receiver: (simple_identifier)
              selector: (simple_identifier)))
          (assignment
            left: (directly_assignable_expression
              (dot_qualified_expression
                receiver: (simple_identifier)
                selector: (simple_identifier)))
            right: (simple_identifier))))))
  (when_expression
    (when_subject
      (simple_identifier))
    (when_entry
      (when_condition
        (integer_literal))
      (control_structure_body
        (block
          (statements
            (property_declaration
              (binding_pattern_kind)
              var_decl: (variable_declaration
                id: (simple_identifier))
              initializer: (dot_qualified_expression
                receiver: (simple_identifier)
                selector: (simple_identifier)))
            (assignment
              left: (directly_assignable_expression
                (dot_qualified_expression
                  receiver: (simple_identifier)
                  selector: (simple_identifier)))
              right: (dot_qualified_expression
                receiver: (simple_identifier)
                selector: (simple_identifier)))
            (assignment
              left: (directly_assignable_expression
                (dot_qualified_expression
                  receiver: (simple_identifier)
                  selector: (simple_identifier)))
              right: (simple_identifier))))))))

================================================================================
Comments in Strings
================================================================================

val comments = foo("//")
val comments = foo("hello //")
val comments = foo("// there")
val comments = foo("hello // there")
val comments = """ 
  // hey there's a
  
  /* comment or two here */
"""
val comments = """ // and here """ 

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      args: (value_arguments
        (value_argument
          (string_literal
            (string_content))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      args: (value_arguments
        (value_argument
          (string_literal
            (string_content))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      args: (value_arguments
        (value_argument
          (string_literal
            (string_content))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (call_expression
      expression: (simple_identifier)
      args: (value_arguments
        (value_argument
          (string_literal
            (string_content))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (string_literal
      (string_content)))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (string_literal
      (string_content))))

================================================================================
Qualified this/super expressions
================================================================================

class Square() : Rectangle(), Polygon {
    override fun draw() {
        this@Square.draw()
        super@Square.draw()
        super<Polygon>.draw()
        super<Rectangle>@Square.draw()
    }
}

--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (simple_identifier)
    (primary_constructor
      (class_parameters))
    (delegation_specifier
      (constructor_invocation
        (user_type
          (type_identifier))
        (value_arguments)))
    (delegation_specifier
      (user_type
        (type_identifier)))
    body: (class_body
      (function_declaration
        modifiers: (modifiers
          (member_modifier))
        name: (simple_identifier)
        parameters: (function_value_parameters)
        body: (function_body
          (block
            (statements
              (call_expression
                expression: (dot_qualified_expression
                  receiver: (this_expression
                    (type_identifier))
                  selector: (simple_identifier))
                args: (value_arguments))
              (call_expression
                expression: (dot_qualified_expression
                  receiver: (super_expression
                    (type_identifier))
                  selector: (simple_identifier))
                args: (value_arguments))
              (call_expression
                expression: (dot_qualified_expression
                  receiver: (super_expression
                    (user_type
                      (type_identifier)))
                  selector: (simple_identifier))
                args: (value_arguments))
              (call_expression
                expression: (dot_qualified_expression
                  receiver: (super_expression
                    (user_type
                      (type_identifier))
                    (type_identifier))
                  selector: (simple_identifier))
                args: (value_arguments)))))))))

================================================================================
If else-if else expression
================================================================================

if (cond1) {
	println("cond1")
} else if (cond2) {
	println("cond2")
} else {
	println("cond3")
}

--------------------------------------------------------------------------------

(source_file
  (if_expression
    condition: (simple_identifier)
    consequence: (control_structure_body
      (block
        (statements
          (call_expression
            expression: (simple_identifier)
            args: (value_arguments
              (value_argument
                (string_literal
                  (string_content))))))))
    alternative: (control_structure_body
      (if_expression
        condition: (simple_identifier)
        consequence: (control_structure_body
          (block
            (statements
              (call_expression
                expression: (simple_identifier)
                args: (value_arguments
                  (value_argument
                    (string_literal
                      (string_content))))))))
        alternative: (control_structure_body
          (block
            (statements
              (call_expression
                expression: (simple_identifier)
                args: (value_arguments
                  (value_argument
                    (string_literal
                      (string_content))))))))))))
================================================================================
Increment/decrement expressions
================================================================================

x++
--x
arr[0]++
--arr[0]

--------------------------------------------------------------------------------

(source_file
  (postfix_expression
    expression: (simple_identifier)
    operator: (postfix_unary_operator))
  (prefix_expression
    op: (prefix_unary_operator)
    expression: (simple_identifier))
  (postfix_expression
    expression: (index_access_expression
      expression: (simple_identifier)
      index: (integer_literal))
    operator: (postfix_unary_operator))
  (prefix_expression
    op: (prefix_unary_operator)
    expression: (index_access_expression
      expression: (simple_identifier)
      index: (integer_literal))))

================================================================================
Delegation
================================================================================

fun f(a: A): A {
    return object : A by a {
    }
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
          name: (simple_identifier)
          type: (user_type
            (type_identifier)))))
    type: (user_type
      (type_identifier))
    body: (function_body
      (block
        (statements
          (jump_expression
            (object_literal
              (delegation_specifier
                (explicit_delegation
                  (user_type
                    (type_identifier))
                  (simple_identifier)))
              (class_body))))))))
