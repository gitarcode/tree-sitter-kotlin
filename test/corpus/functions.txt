==================
Top-level functions
==================

fun main() {}

---

(source_file
  (function_declaration
    name: (simple_identifier) 
    parameters: (function_value_parameters)
    body: (function_body
      (block))))

==================
Generic functions
==================

fun <T> test() {}

---

(source_file
  (function_declaration
    (type_parameters (type_parameter (type_identifier)))
    name: (simple_identifier) 
    parameters: (function_value_parameters)
    body: (function_body
      (block))))

==================
Generic functions with parameters
=================

fun <T: Int> bar(foo: Int): T {}

---
(source_file
  (function_declaration
    (type_parameters
      (type_parameter
        (type_identifier)
        (user_type
          (type_identifier))))
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
                      name: (simple_identifier)
                      type: (user_type
                        (type_identifier)))))
    type: (user_type
      (type_identifier))
    body: (function_body
      (block))))

==================
Functions with parameters
==================

fun main(args: Array<String>) {}

fun sum(a: Int, b: Int) = a + b

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
          name: (simple_identifier)
                  type: (user_type
                          (type_identifier)
                          (type_arguments (type_projection (user_type (type_identifier))))))))
    body: (function_body
      (block)))
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
                     name: (simple_identifier)
                     type: (user_type (type_identifier))))
      (function_value_parameter    
        parameter: (parameter
                     name: (simple_identifier)
                     type: (user_type (type_identifier)))))
    body: (function_body
      expression: (additive_expression
        (simple_identifier)
        (simple_identifier)))))

==================
Functions with return types
==================

fun answerToTheUltimateQuestionOfLifeTheUniverseAndEverything(): Int = 42

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    type: (user_type 
      (type_identifier))
    body: (function_body 
      expression: (integer_literal))))

==================
Functions with return calls
==================

fun foo(p0: Int): Long {
  return p0.toLong()
}

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
          name: (simple_identifier)
          type: (user_type
            (type_identifier)))))
    type: (user_type
      (type_identifier))
    body: (function_body
      (block
        (statements
          (jump_expression
            (call_expression
              expression: (dot_qualified_expression
                receiver: (simple_identifier)
                selector: (simple_identifier))
              args: (value_arguments))))))))

=====================
Override functions
======================

override fun boo() = foo()

---

(source_file
  (function_declaration
    modifiers: (modifiers
      (member_modifier))
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      expression: (call_expression
        expression: (simple_identifier)
        args: (value_arguments)))))

=====================
Set function call
======================

fun test() {
    isAccessible = true
    set(it, COROUTINE_SUSPENDED)
}

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      (block
        (statements
          (assignment
            left: (simple_identifier)
            right: (boolean_literal))
          (call_expression
            expression: (simple_identifier)
            args: (value_arguments
              (value_argument
                (simple_identifier))
              (value_argument
                (simple_identifier)))))))))

==================
Anonymous function
==================

fun()
val anon = fun()

---

(source_file
  (anonymous_function
  (function_value_parameters))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (anonymous_function (function_value_parameters))))

==================
Anonymous function with parameters
==================

fun(x: Int)
val anon = fun(x: Int)

---

(source_file
  (anonymous_function
  (function_value_parameters
    (function_value_parameter
      parameter: (parameter
                   name: (simple_identifier)
                   type: (user_type
                           (type_identifier))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (anonymous_function
    (function_value_parameters
      (function_value_parameter
        parameter: (parameter
                     name: (simple_identifier)
                     type: (user_type
                             (type_identifier))))))))

==================
Anonymous function with return type
==================

fun(): Int
val anon = fun(): Int

---

(source_file
  (anonymous_function
    (function_value_parameters)
    (user_type
      (type_identifier)))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (anonymous_function
      (function_value_parameters)
      (user_type
        (type_identifier)))))

==================
Anonymous function with body
==================

fun() = true
fun() { assert(true) }
val anon = fun() = true
val anon = fun() { assert(true) }

---

(source_file
  (anonymous_function
    (function_value_parameters)
    (function_body
      expression: (boolean_literal)))
  (anonymous_function
    (function_value_parameters)
    (function_body
      (block
        (statements
          (call_expression
            expression: (simple_identifier)
            args: (value_arguments
              (value_argument
                (boolean_literal))))))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (anonymous_function
      (function_value_parameters)
      (function_body
        expression: (boolean_literal))))
  (property_declaration
    (binding_pattern_kind)
    var_decl: (variable_declaration
      id: (simple_identifier))
    initializer: (anonymous_function
      (function_value_parameters)
      (function_body
        (block
          (statements
            (call_expression
              expression: (simple_identifier)
              args: (value_arguments
                (value_argument
                  (boolean_literal))))))))))

==================
Function with backticked name
==================

fun `this is a test function`() = true

---

(source_file
  (function_declaration
   name: (simple_identifier)
   parameters: (function_value_parameters)
   body: (function_body 
    expression: (boolean_literal))))

==================
Function with null literal as expression body
==================

fun f() = null

---

(source_file
  (function_declaration
   name: (simple_identifier)
   parameters: (function_value_parameters)
   body: (function_body 
    expression: (null_literal))))

==================
Function with default value parameter
==================

fun f(x: Int = 1) {
}

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters
      (function_value_parameter
        parameter: (parameter
                     name: (simple_identifier)
                     type: (user_type
                             (type_identifier)))
        initializer: (integer_literal)))
    body: (function_body
      (block))))
