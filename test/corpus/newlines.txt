================================================================================
Dot after newline
================================================================================

bar.foo()
   .show()

--------------------------------------------------------------------------------

(source_file
  (dot_qualified_expression
    receiver: (dot_qualified_expression
      receiver: (simple_identifier)
      selector: (call_expression
        expression: (simple_identifier)
        args: (value_arguments)))
    selector: (call_expression
      expression: (simple_identifier)
      args: (value_arguments))))

================================================================================
Eq after newline
================================================================================

fun foo()
    = 1

---

(source_file
   (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body 
    (integer_literal))))

================================================================================
Binary operator after newline
================================================================================


fun foo()  {
  val bar = x
         && y
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration 
    name: (simple_identifier) 
    parameters: (function_value_parameters)
    body: (function_body
      (block
        (statements
          (property_declaration
            (binding_pattern_kind)
            var_decl: (variable_declaration
              id: (simple_identifier))
            initializer: (conjunction_expression
              (simple_identifier)
              (simple_identifier))))))))

================================================================================
Open brace after newline
================================================================================

fun foo():String
    { return "bar"}

---

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    type: (user_type
      (type_identifier))
    body: (function_body
      (block
        (statements
          (jump_expression
            (string_literal
              (string_content))))))))

================================================================================
Colon after newline
================================================================================

class Foo
    : Bar {
}

--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (simple_identifier)
    (delegation_specifier
      (user_type
        (type_identifier)))
    body: (class_body)))

================================================================================
Question mark after newline
================================================================================


fun foo() {
   val foo = a?.bar(true)
             ?: x.foo()
             ?: break
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      (block
        (statements
          (property_declaration
            (binding_pattern_kind)
            var_decl: (variable_declaration
              id: (simple_identifier))
            initializer: (elvis_expression
              (elvis_expression
                (dot_qualified_expression
                  receiver: (simple_identifier)
                  selector: (call_expression
                    expression: (simple_identifier)
                    args: (value_arguments
                      (value_argument
                        (boolean_literal)))))
                (dot_qualified_expression
                  receiver: (simple_identifier)
                  selector: (call_expression
                    expression: (simple_identifier)
                    args: (value_arguments))))
              (jump_expression))))))))

================================================================================
get after newline
================================================================================
class Foo {
     val maxMemory: Long
     get() = bar() / 1024
}

--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (simple_identifier)
    body: (class_body
      (property_declaration
        (binding_pattern_kind)
        var_decl: (variable_declaration
          id: (simple_identifier)
          type: (user_type
            (type_identifier))))
      (getter
        (function_body
          (multiplicative_expression
            (call_expression
              expression: (simple_identifier)
              args: (value_arguments))
            (integer_literal)))))))

================================================================================
Newline in function call
================================================================================

// The Kotlin grammar does not allow newlines/semicolons in function calls,
// but tree-sitter uses context-aware lexing to overcome this.

foo(1,
    2)

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (call_expression
    expression: (simple_identifier)
    args: (value_arguments
      (value_argument
        (integer_literal))
      (value_argument
        (integer_literal)))))

================================================================================
Else after newline
================================================================================

if (!foo) 3
else boo()

--------------------------------------------------------------------------------

(source_file
  (if_expression
    condition: (prefix_expression
      op: (prefix_unary_operator)
      expression: (simple_identifier))
    consequence: (control_structure_body
      (integer_literal))
    alternative: (control_structure_body
      (call_expression
        expression: (simple_identifier)
        args: (value_arguments)))))

================================================================================
Else on the same line
================================================================================

if (!foo) 3 else boo()

--------------------------------------------------------------------------------

(source_file
  (if_expression
    condition: (prefix_expression
      op: (prefix_unary_operator)
      expression: (simple_identifier))
    consequence: (control_structure_body
      (integer_literal))
    alternative:
      (control_structure_body
        (call_expression
          expression: (simple_identifier)
            args: (value_arguments)))))
